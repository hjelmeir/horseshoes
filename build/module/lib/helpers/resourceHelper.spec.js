import test from 'ava';
import { createAlert } from '../controllers/alertController';
import { ALERT, defaultAlert } from '../models/alert';
import { createResource, defaultResources, initResources, upsertResource, } from './resourceHelper';
const alert1 = {
    key: 'alert1',
    status: 'error',
    message: 'alert 1 message',
};
const alert2 = {
    ...defaultAlert,
    key: 'alert2',
    status: 'error',
    message: 'alert 2 message',
};
const alert1Action = { type: ALERT.CREATE, payload: alert1 };
const alert2Action = { type: ALERT.CREATE, payload: alert2 };
const state0 = initResources();
const state1 = {
    ...state0,
    keys: ['alert1'],
    data: { alert1 },
};
const state2 = {
    ...state0,
    keys: ['alert1', 'alert2'],
    data: { alert1, alert2 },
};
const state3 = {
    ...state0,
    keys: ['alert1', 'alert2'],
    data: {
        alert1,
        alert2: {
            ...alert2,
            status: 'success',
        },
    },
};
test('initResources sets default state', (t) => {
    t.deepEqual(state0, defaultResources);
});
test('createAlert returns expected action', (t) => {
    t.deepEqual(createAlert(alert1), alert1Action);
    t.deepEqual(createAlert(alert2), alert2Action);
});
test('createResource updates state', (t) => {
    t.deepEqual(state1, createResource(state0, alert1));
    t.deepEqual(state2, createResource(state1, alert2));
    t.deepEqual(state2, createResource(state1, { key: 'alert2', status: 'error', message: 'alert 2 message' }, defaultAlert));
});
test('createResource errs if key exists', (t) => {
    const nextState = {
        ...state1,
        error: true,
        errorTrace: {
            createResourceExists: 'Key already exists in state, key: alert1',
        },
    };
    t.deepEqual(nextState, createResource(state1, alert1, defaultAlert));
});
test('updateResource', (t) => {
    t.deepEqual(state3, upsertResource(state2, { ...alert2, status: 'success' }));
    t.deepEqual(state3, upsertResource(state2, { ...alert2, status: 'success' }, defaultAlert));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VIZWxwZXIuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvaGVscGVycy9yZXNvdXJjZUhlbHBlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLEtBQUssQ0FBQztBQUN2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBc0IsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFMUUsT0FBTyxFQUNMLGNBQWMsRUFDZCxnQkFBZ0IsRUFDaEIsYUFBYSxFQUNiLGNBQWMsR0FDZixNQUFNLGtCQUFrQixDQUFDO0FBRTFCLE1BQU0sTUFBTSxHQUFVO0lBQ3BCLEdBQUcsRUFBRSxRQUFRO0lBQ2IsTUFBTSxFQUFFLE9BQU87SUFDZixPQUFPLEVBQUUsaUJBQWlCO0NBQzNCLENBQUM7QUFDRixNQUFNLE1BQU0sR0FBVTtJQUNwQixHQUFHLFlBQVk7SUFDZixHQUFHLEVBQUUsUUFBUTtJQUNiLE1BQU0sRUFBRSxPQUFPO0lBQ2YsT0FBTyxFQUFFLGlCQUFpQjtDQUMzQixDQUFDO0FBQ0YsTUFBTSxZQUFZLEdBQWdCLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQzFFLE1BQU0sWUFBWSxHQUFnQixFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUUxRSxNQUFNLE1BQU0sR0FBcUIsYUFBYSxFQUFTLENBQUM7QUFDeEQsTUFBTSxNQUFNLEdBQXFCO0lBQy9CLEdBQUcsTUFBTTtJQUNULElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQztJQUNoQixJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUU7Q0FDakIsQ0FBQztBQUNGLE1BQU0sTUFBTSxHQUFxQjtJQUMvQixHQUFHLE1B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